/*
 *
 * ProcCtrlInternal.h header template automatically generated by a class generator
 * Creation date : lun. sept. 26 2016
 *
 * This file is part of procctrl libraries.
 * 
 * procctrl is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * procctrl is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with procctrl.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright Remi Ete
 */


#ifndef PROCCTRL_PROCCTRL_INTERNAL_H
#define PROCCTRL_PROCCTRL_INTERNAL_H 1

#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <map>

#define PROCCTRL_MAX_NARGS    4096
#define PROCCTRL_MAX_SIZE     300
#define PROCCTRL_MAX_NENV     100

namespace procctrl {

  /**
   *  @brief Status enum
   */
  enum Status
  {
    SUCCESS,
    FAILURE,
    NOT_INITIALIZED,
    NOT_ALLOWED,
    NOT_FOUND,
    ALREADY_EXISTS,
    ALREADY_INITIALIZED,
    ALREADY_RUNNING,
    ALREADY_CONNECTED,
    INVALID_PASSWORD,
  };

  typedef std::map<std::string, std::string> Environnement;
  typedef std::vector<std::string> ArgumentList;



  /**
   *  @brief  Kill signal enum
   */
  enum KillSignal
  {
    SIGHUP = 1,      // Instruction (HANG UP) - Fin de session
    SIGINT = 2,      // Interruption
    SIGQUIT = 3,     // Instruction (QUIT)
    SIGABRT = 6,     // Instruction (ABORT)
    SIGKILL = 9,     // Instruction (KILL) - termine le processus imm√©diatement
    SIGTERM = 15     // Signal de terminaison
  };

  /**
   *  @brief  Process status enum
   *
   *  D   uninterruptible sleep (usually IO)
   *  R   running or runnable (on run queue)
   *  S   interruptible sleep (waiting for an event to complete)
   *  T   stopped, either by a job control signal or because it is being traced
   *  W   paging (not valid since the 2.6.xx kernel)
   *  X   dead (should never be seen)
   *  Z   defunct ("zombie") process, terminated but not reaped by its parent
   */
  enum ProcessStatus
  {
    UNDEFINED,            // undefined status
    UNINTERUPTIBLE_SLEEP, // D
    RUNNING,              // R
    INTERUPTIBLE_SLEEP,   // S
    STOPPED,              // T
    PAGING,               // W
    DEAD,                 // X
    ZOMBIE                // Z
  };

  /**
   *  @brief  ProcCtrl class
   */
  class ProcCtrl
  {
  public:
    static constexpr const char *WATCHER_GROUP_NAME = "WATCHER_GROUP";
    static constexpr const char *ADMIN_GROUP_NAME   = "ADMIN_GROUP";
    static constexpr const char *DB_USER            = "PROCCTRL";
  };
}

#endif  //  PROCCTRL_PROCESS_MANAGER_H
