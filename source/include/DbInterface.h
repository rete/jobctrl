/// \file DbInterface.h
/*
 *
 * DbInterface.h header template automatically generated by a class generator
 * Creation date : mar. sept. 27 2016
 *
 * This file is part of procctrl libraries.
 * 
 * procctrl is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * procctrl is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with procctrl.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright Remi Ete
 */


#ifndef DBINTERFACE_H
#define DBINTERFACE_H

// -- mysql headers
#include <mysql.h>

#include "ProcCtrlInternal.h"

namespace procctrl {

  /**
   *  @brief  DbInterface class
   */
  class DbInterface
  {
  public:
    /**
     *  @brief  Constructor
     */
    DbInterface();

    /**
     *  @brief  Destructor
     */
    virtual ~DbInterface();

    /**
     *  @brief  Connect to mysql database
     */
    Status connect(
        const std::string &host,
        const std::string &user,
        const std::string &password
    );

    /**
     *  @brief  Disconnect from the database
     */
    Status disconnect();

    /**
     *  @brief  Whether the user is connected to the database
     */
    bool isConnected() const;

    /**
     *  @brief  Get the mysql user name
     */
    const std::string &getUser() const;

    /**
     *  @brief  Get the mysql database host
     */
    const std::string &getHost() const;

    /**
     *  @brief  Check the group password in database
     */
    bool checkGroupPassword(const std::string &group, const std::string &password);

  protected:
    /**
     *  @brief  Execute query to database
     */
    Status execute(const std::string &query);

    /**
     *  @brief  Execute query and handle result in a handler function
     */
    template <typename Handler>
    Status query(const std::string &query, Handler handler);

  private:

    MYSQL                       *m_pMySQL;

    std::string                  m_host;
    std::string                  m_user;
    std::string                  m_password;

    bool                         m_isConnected;
  };

  //----------------------------------------------------------------------------------
  //----------------------------------------------------------------------------------

  template <typename Handler>
  inline Status DbInterface::query(
      const std::string &query,
      Handler handler
  )
  {
    if(!this->isConnected())
      return NOT_INITIALIZED;

    if(mysql_query(m_pMySQL, query.c_str()))
    {
      std::cerr << "MySQL query failed : " << mysql_error(m_pMySQL) << std::endl;
      return FAILURE;
    }

    MYSQL_RES *pMySQLResult = mysql_store_result(m_pMySQL);

    if(!pMySQLResult)
    {
      std::cerr << "MySQL store result failed : " << mysql_error(m_pMySQL) << std::endl;
      return FAILURE;
    }

    handler( pMySQLResult );

    mysql_free_result(pMySQLResult);

    return SUCCESS;
  }

} 

#endif  //  DBINTERFACE_H
