/*
 *
 * ProcessManager.h header template automatically generated by a class generator
 * Creation date : lun. sept. 26 2016
 *
 * This file is part of procctrl libraries.
 * 
 * procctrl is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * procctrl is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with procctrl.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright Remi Ete
 */


#ifndef PROCCTRL_PROCESS_MANAGER_H
#define PROCCTRL_PROCESS_MANAGER_H 1

// -- procctrl headers
#include "ProcCtrlInternal.h"

namespace procctrl {

  namespace server {

    /**
     *  @brief  Process struct
     */
    struct Process
    {
      std::string        m_name;           ///< The process name
      std::string        m_group;          ///< The process group
      std::string        m_program;        ///< The process program full name
      pid_t              m_pid;            ///< The process pid when running
      ProcessStatus      m_status;         ///< The process status
      Environnement      m_environement;   ///< The process environment variables
      ArgumentList       m_arguments;      ///< The process program arguments
    };

    typedef std::map<std::string, Process> ProcessMap;

    /**
     * @brief ProcessManager class
     */
    class ProcessManager
    {
    public:
      /**
       *  @brief  Constructor
       */
      ProcessManager();

      /**
       *  @brief  Destructor
       */
      ~ProcessManager();

      /**
       *  @brief  Add a process
       */
      void addProcess(
          const std::string &name,
          const std::string &group,
          const std::string &program,
          const ArgumentList &args,
          const Environnement &env
      );

      /**
       *  @brief  Start a registered process
       */
      void startProcess(
          const std::string &name
      );

      /**
       *  @brief Restart a registered process
       */
      void restartProcess(
          const std::string &name,
          KillSignal sig = SIGKILL
      );

      /**
       *  @brief  Remove a registered process. Kill the process if running
       */
      void removeProcess(
          const std::string &name,
          KillSignal sig = SIGKILL
      );

      /**
       *  @brief  Kill a runnign process
       */
      void killProcess(
          const std::string &name,
          KillSignal sig = SIGKILL
      );

      /**
       *  @brief  Kill all runing processes
       */
      void killAllProcesses(
          KillSignal sig = SIGKILL
      );

      /**
       *  @brief  Get the process status
       */
      ProcessStatus getProcessStatus(
          const std::string &name
      ) const;

      /**
       *  @brief  Whether the process is registered
       */
      bool isProcessRegistered(
          const std::string &name
      ) const;

      /**
       *  @brief  Whether the process is running
       */
      bool isProcessRunning(
          const std::string &name
      ) const;

      /**
       *  @brief  Get the process group
       */
      void getProcessGroup(
          const std::string &name,
          std::string &group
      ) const;

      /**
       *  @brief  Get the list of process name
       */
      std::vector<std::string> getProcessNames() const;

      /**
       *  @brief  Get the list of process name belonging to a particular group
       */
      std::vector<std::string> getProcessNames(
          const std::string &group
      ) const;

      /**
       *  @brief  Get the process log file content as a string
       */
      std::string getProcessLogFile(
          const std::string &name
      ) const;

      /**
       *  @brief  Get the number of registered processes
       */
      unsigned int getRegisteredProcesses() const;

      /**
       *  @brief  Get the number of registered processes for the target group
       */
      unsigned int getRegisteredProcesses(
          const std::string &group
      ) const;

      /**
       *  @brief  Modify the process environment. Valid only if the process is not running
       */
      void modifyEnvironement(
          const std::string &name,
          const Environnement &env
      );

      /**
       *  @brief  Modify the process program. Valid only if the process is not running
       */
      void modifyProgram(
          const std::string &name,
          const std::string &program
      );

      /**
       *  @brief  Modify the process arguments. Valid only if the process is not running
       */
      void modifyArguments(
          const std::string &name,
          const ArgumentList &args
      );

    private:
      /**
       *  @brief  Start a registered process.
       *          Fork and calls execve()
       */
      void startProcess(
          Process &process
      );

      /**
       *  @brief  Get the process status from the file system
       */
      ProcessStatus getProcessStatus(
          pid_t pid
      ) const;

    private:
      ProcessMap       m_processes;        ///< The process map
    };

  }

}

#endif  //  PROCCTRL_PROCESS_MANAGER_H
