/// \file ServerBrowser.cc
/*
*
* ServerBrowser.cc source template automatically generated by a class generator
* Creation date : ven. dï¿½c. 16 2016
*
* This file is part of procctrl libraries.
*
* procctrl is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* based upon these libraries are permitted. Any copy of these libraries
* must include this copyright notice.
*
* procctrl is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with procctrl.  If not, see <http://www.gnu.org/licenses/>.
*
* @author Remi Ete
* @copyright CNRS , IPNL
*/


#include "ServerBrowser.h"
#include "ProcessManagerClient.h"

namespace procctrl {

  namespace client {

    ServerBrowser::ServerBrowser(unsigned int timerValue, const std::string &dbHost) :
    m_timerValue(timerValue),
    m_dbHost(dbHost)
    {
      DimTimer::start(m_timerValue);
    }

    //----------------------------------------------------------------------------------

    void ServerBrowser::getServerList(std::set<std::string> &serverList, const std::string &dbHost)
    {
      DimBrowser browser;
      browser.getServers();

      char *server, *node;

      while(browser.getNextServer(server, node))
      {
        std::string serverName(server);

        if(serverName.substr(0, std::string("/procctrl/").size()) != "/procctrl/")
        continue;

        std::string realServerName(serverName.substr(std::string("/procctrl/").size()));

        if(!dbHost.empty())
        {
          try
          {
            std::string serverDbHost;
            ProcessManagerClient client(realServerName);
            client.queryDbHost(serverDbHost);

            if(serverDbHost != dbHost)
            continue;
          }
          catch(const Exception &exception)
          {
            continue;
          }
        }

        serverList.insert(realServerName);
      }
    }

    //----------------------------------------------------------------------------------

    void ServerBrowser::timerHandler()
    {
      DimBrowser browser;
      browser.getServers();

      char *server, *node;
      std::set<std::string> newServerNames;
      std::set<std::string> shutdownServerNames;

      while(browser.getNextServer(server, node))
      {
        std::string serverName(server);

        if(serverName.substr(0, std::string("/procctrl/").size()) != "/procctrl/")
        continue;

        std::string realServerName(serverName.substr(std::string("/procctrl/").size()));

        if(!m_dbHost.empty())
        {
          try
          {
            std::string serverDbHost;
            ProcessManagerClient client(realServerName);
            client.queryDbHost(serverDbHost);

            if(serverDbHost != m_dbHost)
              continue;
          }
          catch(const Exception &exception)
          {
            continue;
          }
        }

        if(m_serverNames.insert(realServerName).second)
        {
          newServerNames.insert(realServerName);
        }

        shutdownServerNames.insert(realServerName);
      }

      // difference between found servers on network and currently registered servers
      shutdownServerNames.erase(m_serverNames.begin(), m_serverNames.begin());

      // notify !
      std::lock_guard<std::mutex> lock(m_mutex);

      for(auto &server : newServerNames)
      m_newServerFoundCallbacks.process(server);

      for(auto &server : shutdownServerNames)
      m_serverShutdownCallbacks.process(server);

      // restart dim timer
      DimTimer::start(m_timerValue);
    }

  }

}
