/// \file DbInterface.cc
/*
 *
 * DbInterface.cc source template automatically generated by a class generator
 * Creation date : mar. sept. 27 2016
 *
 * This file is part of procctrl libraries.
 * 
 * procctrl is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * procctrl is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with procctrl.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright Remi Ete
 */


#include "DbInterface.h"

namespace procctrl {

  DbInterface::DbInterface() :
    m_pMySQL(NULL),
    m_isConnected(false)
  {
    /* nop */
  }

  //----------------------------------------------------------------------------------

  DbInterface::~DbInterface()
  {
    if(this->isConnected())
      this->disconnect();
  }

  //----------------------------------------------------------------------------------

  Status DbInterface::connect(
      const std::string &host,
      const std::string &user,
      const std::string &password
  )
  {
    if(this->isConnected())
      return ALREADY_CONNECTED;

    try
    {
      // create mysql instance
      m_pMySQL = mysql_init(NULL);

      if(!m_pMySQL)
      {
        std::stringstream errorMessage;
        errorMessage << "Couldn't create mysql instance : " << mysql_error(m_pMySQL);

        throw std::runtime_error(errorMessage.str());
      }

      // create connection to database
      if(NULL == mysql_real_connect(m_pMySQL, m_host.c_str(), m_user.c_str(), m_password.c_str(),
          NULL, 0, NULL, 0))
      {
        std::stringstream errorMessage;
        errorMessage << "Couldn't initialize mysql connection : " << mysql_error(m_pMySQL);

        throw std::runtime_error(errorMessage.str());
      }

      m_isConnected = true;
    }
    catch(const std::exception &exception)
    {
      if(m_pMySQL)
        mysql_close(m_pMySQL);

      m_isConnected = false;

      std::cerr << "Caught exception while connecting to database : " << exception.what() << std::endl;

      return FAILURE;
    }

    return SUCCESS;
  }

  //----------------------------------------------------------------------------------

  Status DbInterface::disconnect()
  {
    if(!this->isConnected())
      return SUCCESS;

    if(m_pMySQL)
      mysql_close(m_pMySQL);

    return SUCCESS;
  }

  //----------------------------------------------------------------------------------

  bool DbInterface::isConnected() const
  {
    return m_isConnected;
  }

  //----------------------------------------------------------------------------------

  const std::string &DbInterface::getUser() const
  {
    return m_user;
  }

  //----------------------------------------------------------------------------------

  const std::string &DbInterface::getHost() const
  {
    return m_host;
  }

  //----------------------------------------------------------------------------------

  Status DbInterface::execute(
      const std::string &query
  )
  {
    if(!this->isConnected())
      return NOT_INITIALIZED;

    if(mysql_query(m_pMySQL, query.c_str()))
    {
      std::cerr << "MySQL query failed : " << mysql_error(m_pMySQL) << std::endl;
      return FAILURE;
    }

    return SUCCESS;
  }

} 

